package sort

/*
	计数排序
	计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定
	范围的整数。
	计数排序不是比较排序，排序的速度快于任何比较排序算法。
	由于用来计数的数组的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，
	需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。

	1. 找出数组中最大和最小的元素
	2. 统计数组中每个值i出现的次数, 存入额外数组C的的第i项
	3. 对所有计数累加(从额外数组的第一个元素开始，每一项和前一项相加)
	4. 反向填充目标数组: 将每个元素i放在新数组的第C(i)项, 每放一个元素就将C(i)减1

	注: 从算法不难看出，计数排序的对象必须是大于0的整数
*/

//给定数组的最大值
func CountingSort(data []int, max int) {
	var c = make([]int, max+1)

	for _, v := range data {
		c[v]++
	}
	//c中大于0的元素的索引即是data里的元素，即data中的元素按照索引顺序已经排好序，
	// 接下来便是按着索引的顺序将c中值大于0的元素的索引存储近data中（存储c[i]次）
	var startIndex int
	for i := 0; i <= max; i++ {
		for c[i] > 0 {
			data[startIndex] = i
			startIndex++
			c[i]--
		}
	}
}
