package sort

/*
	冒泡排序, 算法步骤(升序):
	1. 每次比较相邻的两个元素，如果第一个比第二个大，则交换位置
	2. 从头到尾比较完称之为一趟，每趟比较完成后，该趟最大的元素都将被移动到所有参与比较的元素最后的位置，所以下一趟比较的时候，已经放在最后位置的元素不需要再参与比较。
	3. 继续对变少的元素进行下一趟的比较，直到所有元素有序。


*/

/*
冒泡排序，每次找出最小的值放在最前面
1. 两个循环变量i, j，内层j执行比较和交换，外层i控制内层j需要比较的趟数
2. 比较相邻的元素。如果第一个比第二个大，则交换位置，最终当前最大的数将会被移到数组末尾，所以每次内层循环中，数组最后i个元素不需要进行比较。
*/

func BubbleSort(data []int) {
	count := len(data)
	if count <= 0 {
		return
	}

	for i := 0; i < count; i++ {
		for j := 0; j < count-i-1; j++ {
			if data[j] > data[j+1] {
				data[j], data[j+1] = data[j+1], data[j]
			}
		}
	}
	return
}
